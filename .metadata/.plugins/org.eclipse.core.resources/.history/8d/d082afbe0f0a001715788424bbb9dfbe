package textExcel;

// Update this file with your own code.

public class Spreadsheet implements Grid
{
	
Cell[][] excelSpreadsheet;
	
	public Spreadsheet(){
		excelSpreadsheet= new Cell[getRows()][getCols()];
		for(int i = 0; i < getRows(); i++){
			for(int j = 0; j < getCols(); j++){
				excelSpreadsheet[i][j] = new EmptyCell();
			}
		}
	}

	@Override
	public String processCommand(String command){  	
		
		String[] split = command.split(" ");
		
		if(command.equals(" ")){
			return "";
		}
		else if(command.equalsIgnoreCase("clear")){
			for(int i = 0; i < getRows(); i++){
				for(int j = 0; j < getCols(); j++){
					excelSpreadsheet[i][j] = new EmptyCell();
				}
			}
			return getGridText();	
		}
		else if(command.toLowerCase().contains("clear ")){
			String changeLoc = split[1];
			SpreadsheetLocation location = new SpreadsheetLocation(changeLoc);
			excelSpreadsheet[location.getRow()][location.getCol()] = new EmptyCell();
			return getGridText();
		}
		else if(command.contains("=")){
			String[] splitInput = command.split(" = ");
			String loc = splitInput[0];
			String cell = splitInput[1];
			if(splitInput.length >= 3){
				System.out.println(cell += " = " + splitInput[2]);
			}
			if(cell.contains("\"")){
				cell = cell.replace("\"", "");
			}
			SpreadsheetLocation location = new SpreadsheetLocation(loc);
			excelSpreadsheet[location.getRow()][location.getCol()] = new TextCell(cell);
	    	return getGridText(); 
		}
		else if(split.length <= 3){
			SpreadsheetLocation location = new SpreadsheetLocation(command);
			return excelSpreadsheet[location.getRow()][location.getCol()].fullCellText();
		}
		return getGridText();
	}

	
	@Override
	public int getRows()
	{
		return 20;
	}

	@Override
	public int getCols()
	{
		return 12;
	}

	@Override
	public Cell getCell(Location loc)
	{
		int row = loc.getRow();
		int column = loc.getCol();
		return excelSpreadsheet[row][column];	}

	@Override
	public String getGridText(){
		String grid = "   |";
		for(int i=0; i < getCols(); i++){
			grid += (char) (i + 'A') + "         |";
		}
		grid += "\n";
	
		for(int i=1; i <= getRows(); i++){
			if(i > 9){
				grid += i + " ";
			}
			if(i < 10){
				grid += i + "  ";
			}
			for(int j=0; j < getCols(); j++){
				grid += "|" + excelSpreadsheet[i-1][j].abbreviatedCellText();
			}
			grid += "|\n";
		}
		return grid;
	}

/*	@Override
	public String getGridText()
	{
		String grid = "";
		String header = "   |";
		for (int col = 0; col < this.getCols(); col++){		// get the column header from A to L
			header += ((char)('A' + col)) + "         |";
		}
		header += "\n";
		grid += header;		//Add the header to "finalGrid"
		String rowsHeading = "";
		for (int row = 0; row < this.getRows(); row++){
			String rows = "";
			if (row < 9){		//if the row header digit is less than two digits.
				rowsHeading = ((row+1)+"  |");
			}else{		//if it exceeds one digit.
				rowsHeading = ((row+1)+" |");
			}
			grid += rowsHeading;		//Add row heading to "finalGrid" before adding the actual rows.
			for (int column = 0; column < this.getCols(); column++){	
				rows += excelSpreadsheet[row][column].abbreviatedCellText()+"|";		//use .abbreviatedCellText of the cells itself to make sure the texts fit the boxes.
			}
			rows += "\n";		//add new line at the end of each row when it reaches L column.
			grid += rows;		//add everything to "finalGrid"
		}							//"finalGrid" turns into a very long string that prints out the whole spreadsheet.
		return grid;
	}
	*/
}
