package textExcel;

// Update this file with your own code.

public class Spreadsheet implements Grid
{
	
	Cell[][] excelSpreadsheet = new EmptyCell[20][12];	// 2D array of cells with 20 rows and 12 columns
	//private String firstRow = "   ";
	public Spreadsheet() {
		for (int i = 0; i < excelSpreadsheet.length; i++){
			for (int j = 0; j < excelSpreadsheet[i].length; j++){
				excelSpreadsheet [i][j] = new EmptyCell();
			}
		}
	}
	
	@Override
	public String processCommand(String command)
	{
		// TODO Auto-generated method stub
		String[] splitted = command.split(" ");
		if(command.equals("")){
			return command;
		}
		else if (command.toLowerCase().equals("clear")) { // if the user input is "clear"
			for(int i=0; i<20; i++){
				for(int j=0; j<12;j++){
					excelSpreadsheet[i][j]=new EmptyCell();
				}
			} 
		} // if the user types in "clear" plus a particular cell
		else if (splitted.length == 2 && splitted[0].toLowerCase().equals("clear")) {
			String location = splitted[1];
			SpreadsheetLocation loc = new SpreadsheetLocation(location);
			excelSpreadsheet[loc.getRow()][loc.getCol()] = new EmptyCell();
			return getGridText();
		} //if the user wants to assign a value to a cell
		else if (splitted.length == 3) { 
			String location = splitted[0];  // eg. A1
			String value = splitted[2];  
			String noQuotes = value.substring(0, value.length()-1);
			SpreadsheetLocation loc = new SpreadsheetLocation(location);
			excelSpreadsheet[loc.getRow()][loc.getCol()] = new TextCell(noQuotes);
			return getGridText();
		} else {
			SpreadsheetLocation loc = new SpreadsheetLocation(command);
			return excelSpreadsheet[loc.getRow()][loc.getCol()].fullCellText();
		} 
		return null;
	}
	
	@Override
	public int getRows()
	{
		return 20;
	}

	@Override
	public int getCols()
	{
		return 12;
	}

	@Override
	public Cell getCell(Location loc)
	{
		return excelSpreadsheet[loc.getRow()][loc.getCol()];
	}

	@Override
	public String getGridText()
	{
		String grid = "";
		String header = "   |";
		for (int col = 0; col < this.getCols(); col++){		// get the column header from A to L
			header += ((char)('A' + col)) + "         |";
		}
		header += "\n";
		grid += header;		//Add the header to "finalGrid"
		String rowsHeading = "";
		for (int row = 0; row < this.getRows(); row++){
			String rows = "";
			if (row < 9){		//if the row header digit is less than two digits.
				rowsHeading = ((row+1)+"  |");
			}else{		//if it exceeds one digit.
				rowsHeading = ((row+1)+" |");
			}
			grid += rowsHeading;		//Add row heading to "finalGrid" before adding the actual rows.
			for (int column = 0; column < this.getCols(); column++){	
				rows += excelSpreadsheet[row][column].abbreviatedCellText()+"|";		//use .abbreviatedCellText of the cells itself to make sure the texts fit the boxes.
			}
			rows += "\n";		//add new line at the end of each row when it reaches L column.
			grid += rows;		//add everything to "finalGrid"
		}							//"finalGrid" turns into a very long string that prints out the whole spreadsheet.
		return grid;
	}
}
